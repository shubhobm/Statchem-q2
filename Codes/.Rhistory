## actual signal
err0 = c(mean(e^2), 1-mean(e^2)/mean(y^2))
## shall use LASSO
## 5-fold cv
cat("5-fold cv\n")
err.mat1 = matrix(0, nrow=5, ncol=2)
folds = createFolds(1:n, k=5)
pb = txtProgressBar(0,5)
for(i in 1:5){
test = folds[[i]]
cv.obj1 = cv.glmnet(X[-test,],y[-test])
err1 = mean((y[test] - predict(cv.obj1, X[test,], s="lambda.min"))^2)
err.mat1[i,] = c(err1, 1- err1/mean(y[test]^2))
setTxtProgressBar(pb,i)
}
close(pb)
err.mat1
err0
## LOO cv
cat("LOO cv\n")
err.vec2 = rep(0,n)
pb = txtProgressBar(0,n)
for(rep2 in 1:n){
cv.obj2 = cv.glmnet(X[-rep2,],y[-rep2])
err.vec2[rep2] = (y[rep2] - sum(c(1,X[rep2,]) * as.numeric(coef(cv.obj2, s="lambda.min"))))^2
setTxtProgressBar(pb,rep2)
}
close(pb)
mean(err.vec2)
colMeans(err.mat1)
mean(err.vec2)/mean(y^2)
1-mean(err.vec2)/mean(y^2)
cat("repeated external cv\n")
err.mat4 = matrix(0, nrow=100, ncol=2)
pb = txtProgressBar(0,100)
for(rep4 in 1:100){
test = sample(1:n, 10, replace=F)
cv.obj4 = cv.glmnet(X[-test,],y[-test])
err4 = mean((y[test] - predict(cv.obj4, X[test,], s="lambda.min"))^2)
err.mat4[rep4,] = c(err4, 1- err4/mean(y[test]^2))
setTxtProgressBar(pb,rep4)
}
close(pb)
colMeans(err.mat4)
err0
rbind(err0,
colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4)
dim(  rbind(err0,
colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4))
rm(list=ls())
setwd('D:/Study/My projects/Statchem-q2/Codes')
library(glmnet)
library(caret)
## generate data
n = 100
do.all = function(p){
set.seed(07072017)
X = matrix(rnorm(n*p), nrow=n)
beta = c(rep(1,10), rep(0,p-10))
e = rnorm(n)
y = X %*% beta + e
## actual signal
err0 = c(mean(e^2), 1-mean(e^2)/mean(y^2))
## shall use LASSO
## 5-fold cv
cat("5-fold cv\n")
err.mat1 = matrix(0, nrow=5, ncol=2)
folds = createFolds(1:n, k=5)
pb = txtProgressBar(0,5)
for(i in 1:5){
test = folds[[i]]
cv.obj1 = cv.glmnet(X[-test,],y[-test])
err1 = mean((y[test] - predict(cv.obj1, X[test,], s="lambda.min"))^2)
err.mat1[i,] = c(err1, 1- err1/mean(y[test]^2))
setTxtProgressBar(pb,i)
}
close(pb)
## LOO cv
cat("LOO cv\n")
err.vec2 = rep(0,n)
pb = txtProgressBar(0,n)
for(rep2 in 1:n){
cv.obj2 = cv.glmnet(X[-rep2,],y[-rep2])
err.vec2[rep2] = (y[rep2] - sum(c(1,X[rep2,]) * as.numeric(coef(cv.obj2, s="lambda.min"))))^2
setTxtProgressBar(pb,rep2)
}
close(pb)
## external validation
# test = sample(1:n, 10, replace=F)
# cv.obj3 = cv.glmnet(X[-test,],y[-test])
# mean((y[test] - predict(cv.obj3, X[test,], s="lambda.min"))^2)
## repeated external validation
cat("repeated external cv\n")
err.mat4 = matrix(0, nrow=100, ncol=2)
pb = txtProgressBar(0,100)
for(rep4 in 1:100){
test = sample(1:n, 10, replace=F)
cv.obj4 = cv.glmnet(X[-test,],y[-test])
err4 = mean((y[test] - predict(cv.obj4, X[test,], s="lambda.min"))^2)
err.mat4[rep4,] = c(err4, 1- err4/mean(y[test]^2))
setTxtProgressBar(pb,rep4)
}
close(pb)
## return
rbind(err0,
colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4)
}
out100 = do.all(100)
out500 = do.all(500)
out1000 = do.all(1000)
out.all = list(out100, out500, out1000)
save(out.all, file="out_simulation.Rda")
set.seed(07072017)
y = lta98$Y[-1]
X = as.matrix(with(lta98, cbind(ltaTS,ltaTC,lta3D, ltaQC))[-1,])
n = nrow(X)
p = ncol(X)
## shall use LASSO
## 5-fold cv
cat("5-fold cv\n")
err.mat1 = matrix(0, nrow=5, ncol=2)
folds = createFolds(1:n, k=5)
pb = txtProgressBar(0,5)
for(i in 1:5){
test = folds[[i]]
cv.obj1 = cv.glmnet(X[-test,],y[-test])
err1 = mean((y[test] - predict(cv.obj1, X[test,], s="lambda.min"))^2)
err.mat1[i,] = c(err1, 1- err1/mean(y[test]^2))
setTxtProgressBar(pb,i)
}
close(pb)
## LOO cv
cat("LOO cv\n")
err.vec2 = rep(0,n)
pb = txtProgressBar(0,n)
for(rep2 in 1:n){
cv.obj2 = cv.glmnet(X[-rep2,],y[-rep2])
err.vec2[rep2] = (y[rep2] - sum(c(1,X[rep2,]) * as.numeric(coef(cv.obj2, s="lambda.min"))))^2
setTxtProgressBar(pb,rep2)
}
close(pb)
## external validation
# test = sample(1:n, 10, replace=F)
# cv.obj3 = cv.glmnet(X[-test,],y[-test])
# mean((y[test] - predict(cv.obj3, X[test,], s="lambda.min"))^2)
## repeated external validation
cat("repeated external cv\n")
err.mat4 = matrix(0, nrow=100, ncol=2)
pb = txtProgressBar(0,100)
for(rep4 in 1:100){
test = sample(1:n, 10, replace=F)
cv.obj4 = cv.glmnet(X[-test,],y[-test])
err4 = mean((y[test] - predict(cv.obj4, X[test,], s="lambda.min"))^2)
err.mat4[rep4,] = c(err4, 1- err4/mean(y[test]^2))
setTxtProgressBar(pb,rep4)
}
close(pb)
## return
out.all = rbind(err0,
colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4)
load('../Data/lta98.rda')
set.seed(07072017)
y = lta98$Y[-1]
X = as.matrix(with(lta98, cbind(ltaTS,ltaTC,lta3D, ltaQC))[-1,])
n = nrow(X)
p = ncol(X)
cat("5-fold cv\n")
err.mat1 = matrix(0, nrow=5, ncol=2)
folds = createFolds(1:n, k=5)
pb = txtProgressBar(0,5)
for(i in 1:5){
test = folds[[i]]
cv.obj1 = cv.glmnet(X[-test,],y[-test])
err1 = mean((y[test] - predict(cv.obj1, X[test,], s="lambda.min"))^2)
err.mat1[i,] = c(err1, 1- err1/mean(y[test]^2))
setTxtProgressBar(pb,i)
}
close(pb)
## LOO cv
cat("LOO cv\n")
err.vec2 = rep(0,n)
pb = txtProgressBar(0,n)
for(rep2 in 1:n){
cv.obj2 = cv.glmnet(X[-rep2,],y[-rep2])
err.vec2[rep2] = (y[rep2] - sum(c(1,X[rep2,]) * as.numeric(coef(cv.obj2, s="lambda.min"))))^2
setTxtProgressBar(pb,rep2)
}
close(pb)
## external validation
# test = sample(1:n, 10, replace=F)
# cv.obj3 = cv.glmnet(X[-test,],y[-test])
# mean((y[test] - predict(cv.obj3, X[test,], s="lambda.min"))^2)
## repeated external validation
cat("repeated external cv\n")
err.mat4 = matrix(0, nrow=100, ncol=2)
pb = txtProgressBar(0,100)
for(rep4 in 1:100){
test = sample(1:n, 10, replace=F)
cv.obj4 = cv.glmnet(X[-test,],y[-test])
err4 = mean((y[test] - predict(cv.obj4, X[test,], s="lambda.min"))^2)
err.mat4[rep4,] = c(err4, 1- err4/mean(y[test]^2))
setTxtProgressBar(pb,rep4)
}
close(pb)
## return
out.all = rbind(err0,
colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4)
out.all = rbind(colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4)
out.all[1:2,]
colMeans(out.all[-(1:2),]
)
colMeans(err.mat1)
colMeans(err.mat4)
plot(density(Err.mat4[,2]))
plot(density(err.mat4[,2]))
abline(v=1-mean(err.vec2)/mean(y^2)))
abline(v=1-mean(err.vec2)/mean(y^2))
abline(v=colMeans(err.mat1)[2], lty=2)
abline(v=colMeans(err.mat4)[2], lty=3)
abline(v=apply(err.mat4,2,median)[2], lty=3)
apply(err.mat4,2,median)
out.all = rbind(colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4)
save(out.all, file="out_lta98.Rda")
out.all
dim(out.all[[1]])
colMeans(out.all[[1]][-(1:3),])
colMeans(out.all[[2]][-(1:3),])
colMeans(out.all[[3]][-(1:3),])
lapply(out.all, function(x) x[2:3,])
lapply(out.all, function(x) apply(x[-(1:3),], 2, function(y) c(min(y), max(y))))
lapply(out.all, function(x) apply(x[-(1:3),], 2, min))
lapply(out.all, function(x) apply(x[-(1:3),], 2, function(y) quantile(y,.25)))
which(out.list[[1]][,2]<0)
which(out.all[[1]][,2]<0)
which(out.all[[3]][,2]<0)
lapply(out.all, function(x) (x[-(1:3),])[-which(x[-(1:3),2])<0,]
)
lapply(out.all, function(x) (x[-(1:3),])[-which(x[-(1:3),2]<0),])
lapply(out.all, function(x) apply(x[(-1:3),],2,min))
lapply(out.all, function(x) apply(x[-(1:3),],2,min))
lapply(out.all, function(x) apply(x[-(1:3),],2,max))
lapply(out.all, function(x) apply(x[-(1:3),],2,median))
lapply(out.all, function(x) apply(x[-(1:3),],2,function(y) quantile(y,.25)))
lapply(out.all, function(x) apply(x[-(1:3),],2,function(y) quantile(y,.75)))
z = out.all[[3]]
z = out.all[[3]][-(1:3),]
dim(z)
z = z[-which(z[,2]<0),]
dim(z)
apply(z,2,min)
apply(z,2,max)
apply(z,2,median)
apply(z,2,function(x) quantile(x,.25))
apply(z,2,function(x) quantile(x,.75))
out.list[[1]][1:3,]
out.all[[1]][1:3,]
out.all[[2]][1:3,]
out.all[[3]][1:3,]
load("D:/Study/My projects/Statchem-q2/Codes/out_lta98.Rda")
out.all[1:3,]
dim(out.all)
out.all[1:2,]
apply(out.all[-(1:2),],2,mean)
apply(out.all[-(1:2),],2,min)
apply(out.all[-(1:2),],2,max)
z = out.all[-(1:2),]
z = z[-which(z[,2]<0),]
dim(z)
apply(z,2,min)
apply(z,2,max)
apply(z,2,median)
apply(z,2,function(x) quantile(x,.25))
apply(z,2,function(x) quantile(x,.75))
?permute
?sample
rm(list=ls())
setwd('D:/Study/My projects/Statchem-q2/Codes')
library(glmnet)
library(caret)
## generate data
n = 100
do.all = function(p){
set.seed(07072017)
X = matrix(rnorm(n*p), nrow=n)
beta = c(rep(1,10), rep(0,p-10))
e = rnorm(n)
y = X %*% beta + e
y = sample(y, n, replace=F)
## actual signal
err0 = c(mean(e^2), 1-mean(e^2)/mean(y^2))
## shall use LASSO
## 5-fold cv
cat("5-fold cv\n")
err.mat1 = matrix(0, nrow=5, ncol=2)
folds = createFolds(1:n, k=5)
pb = txtProgressBar(0,5)
for(i in 1:5){
test = folds[[i]]
cv.obj1 = cv.glmnet(X[-test,],y[-test])
err1 = mean((y[test] - predict(cv.obj1, X[test,], s="lambda.min"))^2)
err.mat1[i,] = c(err1, 1- err1/mean(y[test]^2))
setTxtProgressBar(pb,i)
}
close(pb)
## LOO cv
cat("LOO cv\n")
err.vec2 = rep(0,n)
pb = txtProgressBar(0,n)
for(rep2 in 1:n){
cv.obj2 = cv.glmnet(X[-rep2,],y[-rep2])
err.vec2[rep2] = (y[rep2] - sum(c(1,X[rep2,]) * as.numeric(coef(cv.obj2, s="lambda.min"))))^2
setTxtProgressBar(pb,rep2)
}
close(pb)
## external validation
# test = sample(1:n, 10, replace=F)
# cv.obj3 = cv.glmnet(X[-test,],y[-test])
# mean((y[test] - predict(cv.obj3, X[test,], s="lambda.min"))^2)
## repeated external validation
cat("repeated external cv\n")
err.mat4 = matrix(0, nrow=100, ncol=2)
pb = txtProgressBar(0,100)
for(rep4 in 1:100){
test = sample(1:n, 10, replace=F)
cv.obj4 = cv.glmnet(X[-test,],y[-test])
err4 = mean((y[test] - predict(cv.obj4, X[test,], s="lambda.min"))^2)
err.mat4[rep4,] = c(err4, 1- err4/mean(y[test]^2))
setTxtProgressBar(pb,rep4)
}
close(pb)
## return
rbind(err0,
colMeans(err.mat1),
c(mean(err.vec2), 1-mean(err.vec2)/mean(y^2)),
err.mat4)
}
out100 = do.all(100)
out500 = do.all(500)
out100 = do.all(100)
out500 = do.all(500)
out1000 = do.all(1000)
out.all = list(out100, out500, out1000)
save(out.all, file="out_simulation_randomy.Rda")
lapply(out.all, function(x) x[(1:3),])
lapply(out.all, function(x) x[-(1:3),])
##
rm(list=ls())
setwd('D:/Study/My projects/Statchem-q2/Codes')
library(glmnet)
library(caret)
## generate data
n = 100
p=100
set.seed(07072017)
X = matrix(rnorm(n*p), nrow=n)
beta = c(rep(1,10), rep(0,p-10))
e = rnorm(n)
y = X %*% beta + e
## actual signal
err0 = c(mean(e^2), 1-mean(e^2)/mean(y^2))
## shall use LASSO
## 5-fold cv
cat("5-fold cv\n")
err.mat1 = matrix(0, nrow=5, ncol=2)
folds = createFolds(1:n, k=5)
pb = txtProgressBar(0,5)
for(i in 1:5){
test = folds[[i]]
cv.obj1 = cv.glmnet(X[-test,],y[-test])
err1 = mean((y[test] - predict(cv.obj1, X[test,], s="lambda.min"))^2)
err.mat1[i,] = c(err1, 1- err1/mean(y[test]^2))
setTxtProgressBar(pb,i)
}
close(pb)
plot(cv.obj1)
?glmnet
plot.cv.glmnet()
?plot.cv.glmnet
plot(cv.obj1$glmnet.fit)
plot(cv.obj1$glmnet.fit, col="black")
plot(cv.obj1$glmnet.fit, "lambda",col="black")
cv.obj1$cvm
plot(cv.obj1)
plot(cv.obj1$glmnet.fit, "lambda",col="black")
abline(v=which.min(cv.obj1$cvm))
abline(v=-which.min(cv.obj1$cvm))
abline(v=-min(cv.obj1$cvm))
cv.obj1$lambda
abline(v=with(cv.obj1, log(lambda(which.min(cvm)))))
abline(v=with(cv.obj1, log(lambda[which.min(cvm)))])
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])))
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])))
plot(cv.obj1)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1)
par(mfrow=c(1,1))
?plot.cv.glmnet
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE", xlab="log(lambda")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE", xlab="log(lambda)")
par(mfrow=c(1,1))
setwd('D:/Study/My projects/Statchem-q2/Codes')
pdf('lassoplot.pdf',3,5)
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE", xlab="log(lambda)")
par(mfrow=c(1,1))
dev.off()
pdf('lassoplot.pdf',5,3)
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE", xlab="log(lambda)")
par(mfrow=c(1,1))
dev.off()
pdf('lassoplot.pdf',8,4)
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE", xlab="log(lambda)")
par(mfrow=c(1,1))
dev.off()
pdf('lassoplot.pdf',8,5)
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE", xlab="log(lambda)")
par(mfrow=c(1,1))
dev.off()
pdf('lassoplot.pdf',9,5)
par(mfrow=c(1,2))
plot(cv.obj1$glmnet.fit, "lambda",col="black", xlab="log(lambda)")
abline(v=with(cv.obj1, log(lambda[which.min(cvm)])), lty=2)
plot(cv.obj1, ylab=" 5-fold MSPE", xlab="log(lambda)")
par(mfrow=c(1,1))
dev.off()
ls()
out.all
load("D:/Study/My projects/Statchem-q2/Codes/out_simulation.Rda")
out.all[[1]]
dim(out.all[[1]])
dim(out.all[[2]])
out.all[[2]]
out.all[[3]]
euro.cross
out100
out100[[1
]]
summarize = function(err.matrix){
rbind(err.matrix[1:2,],
apply(err.matrix[-(1:2),],2,min),
apply(err.matrix[-(1:2),],2,function(x) quantile(x, .25)),
apply(err.matrix[-(1:2),],2,median),
apply(err.matrix[-(1:2),],2,function(x) quantile(x, .75)),
apply(err.matrix[-(1:2),],2,max),
apply(err.matrix[-(1:2),],2,mean))
}
summarize(out100[[1]])
summarize = function(err.matrix){
rbind(err.matrix[1:3,],
apply(err.matrix[-(1:3),],2,min),
apply(err.matrix[-(1:3),],2,function(x) quantile(x, .25)),
apply(err.matrix[-(1:3),],2,median),
apply(err.matrix[-(1:3),],2,function(x) quantile(x, .75)),
apply(err.matrix[-(1:3),],2,max),
apply(err.matrix[-(1:3),],2,mean))
}
summarize(out100[[1]])
summary.list = lapply(out100, summarize)
apply(simplify2array(summary.list),1:2,mean)
apply(simplify2array(summary.list),1:2,sd)
round(apply(simplify2array(summary.list),1:2,mean),2)
round(apply(simplify2array(summary.list),1:2,sd),3)
load('out_sim_p500.Rda')
summary.list = lapply(out500, summarize)
round(apply(simplify2array(summary.list),1:2,mean),2)
round(apply(simplify2array(summary.list),1:2,sd),3)
load('out_sim_p1000.Rda')
summary.list = lapply(out1000, summarize)
round(apply(simplify2array(summary.list),1:2,mean),2)
round(apply(simplify2array(summary.list),1:2,sd),3)
